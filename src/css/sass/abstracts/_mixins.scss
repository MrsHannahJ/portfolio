// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

///Media Query Mixin
/// @author Hugo Giraudel
@mixin respond-to($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}
//xs is <48em
//sm is 48em and up
//md is 62em and up
//lg is 75em and up


//@include respond-to(sm) { ... }
//@include respond-to(md) { ... }
//@include respond-to(lg) { ... }


//background opacity
@mixin background-opacity($color, $opacity: 0.3) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}




//button themes
@mixin button-theme($color, $border-color:$color, $background:transparent) {
  color: $color;
  border: 1px solid $border-color;
  background: $background;
}






// Mixin for nav line animation
//Adapted from Thomas Vaeth, https://codepen.io/thomasvaeth/pen/MoXvXp
@mixin btn-border-slide($color, $hoverColor, $borderWidth, $time) {
  $easing: cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  display: inline-block;
  padding: 0.5em 1em;
  cursor: pointer;
  overflow: hidden;

  &:hover {
    &:after {
      transform: translate3d(0, 0, 0);
    }
  }

  &:after {
    content: "";
    position: absolute;
    left: 0;
    z-index: 9;
    height: $borderWidth;
    width: 100%;
    background-color: $hoverColor;
    bottom: 0;
    transform: translate3d(-105%, 0, 0);
    transition: transform $time $easing;
  }
}




// Mixin for drawing button with optional argument for width, padding, and time
//Adapted from Thomas Vaeth, https://codepen.io/thomasvaeth/pen/JKxRNk
@mixin btn-draw($color, $color-hov, $width: 1px, $padding: 0.5em, $time: 0.1s) {
  position: relative;
  display: inline-block;
  color: $color;
  border-bottom: $width solid $color;
  cursor: pointer;
  overflow: hidden;
  transition: color $time ease-in-out, background-color $time ease-in-out;

  &:after {
    content: '';
    position: absolute;
    right: 0;
    bottom: 0;
    height: 100%;
    width: $width;
    background: $color;
    transform: translateY(100%);
    transition: transform $time ease-in-out;
    transition-delay: $time * 3;
  }

  > span {
    position: relative;
    display: block;
    padding: $padding;
    color: inherit;

    &:before,
    &:after {
      content: '';
      position: absolute;
      left: 0;
      top: 0;

      background: $color;
      transition: transform $time ease-in-out;
    }

    &:before {
      height: $width;
      width: 100%;
      transform: translateX(100%);
      transition-delay: $time * 2;
    }

    &:after {
      height: 100%;
      width: $width;
      transform: translateY(-100%);
      transition-delay: $time;
    }
  }

  &:hover:after, 
  &:hover > span:before, 
  &:hover > span:after {
    transform: translate(0, 0);
  }

  &:hover:after {
    transition-delay: 0s;
  }

  &:hover > span:before {
    transition-delay: $time;
  }

  &:hover > span:after {
    transition-delay: $time * 2;
  }

  &:hover {
    color: $color-hov;
    background-color: $color;
    transition-delay: $time * 3;
  }
}




//came with bar graph...don't know if it is necessary
@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}



//for back lighting

@mixin flex_center($height, $width, $background-color){
  align-items: center;
  background-color: $background-color;
  display: flex;
  height: $height;
  justify-content: space-around;
  width: $width;
}

